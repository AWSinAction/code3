---
AWSTemplateFormatVersion: '2010-09-09'
Description: 'AWS in Action: chapter 5 (VPC)'
Mappings:
  RegionMap:
    'eu-north-1':
      AMI: 'ami-05bc2576a72f22c39'
    'ap-south-1':
      AMI: 'ami-0002bdad91f793433'
    'eu-west-3':
      AMI: 'ami-0c73cd1c5347436f3'
    'eu-west-2':
      AMI: 'ami-029ed17b4ea379178'
    'eu-west-1':
      AMI: 'ami-04632f3cef5083854'
    'ap-northeast-3':
      AMI: 'ami-0ae88850834d2c589'
    'ap-northeast-2':
      AMI: 'ami-0263588f2531a56bd'
    'ap-northeast-1':
      AMI: 'ami-0abaa5b0faf689830'
    'sa-east-1':
      AMI: 'ami-053a035b046dbb704'
    'ca-central-1':
      AMI: 'ami-0173297cea9ba27b0'
    'ap-southeast-1':
      AMI: 'ami-0d1d4b8d5a0cd293f'
    'ap-southeast-2':
      AMI: 'ami-0f4484f62c4fd8767'
    'eu-central-1':
      AMI: 'ami-099ccc441b2ef41ec'
    'us-east-1':
      AMI: 'ami-061ac2e015473fbe2'
    'us-east-2':
      AMI: 'ami-056b1936002ca8ede'
    'us-west-1':
      AMI: 'ami-028f2b5ee08012131'
    'us-west-2':
      AMI: 'ami-0e21d4d9303512b8e'
Resources:
  SecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: 'Allowing all incoming and outgoing traffic.'
      VpcId: !Ref VPC
      SecurityGroupIngress:
      - IpProtocol: '-1'
        FromPort: '-1'
        ToPort: '-1'
        CidrIp: '0.0.0.0/0'
      SecurityGroupEgress:
      - IpProtocol: '-1'
        FromPort: '-1'
        ToPort: '-1'
        CidrIp: '0.0.0.0/0'
      Tags:
      - Key: Name
        Value: 'AWS in Action: chapter 5 (VPC)'
  VPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: '10.0.0.0/16'
      EnableDnsHostnames: 'true'
      Tags:
      - Key: Name
        Value: 'AWS in Action: chapter 5 (VPC)'
  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    Properties: {}
  VPCGatewayAttachment:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway
  SubnetPublicNAT:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: '10.0.0.0/24'
      MapPublicIpOnLaunch: true
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: 'Public NAT'
  RouteTablePublicNAT:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
  RouteTableAssociationPublicNAT:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref SubnetPublicNAT
      RouteTableId: !Ref RouteTablePublicNAT
  RoutePublicNATToInternet:
    Type: 'AWS::EC2::Route'
    Properties:
      RouteTableId: !Ref RouteTablePublicNAT
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref InternetGateway
    DependsOn: VPCGatewayAttachment
  NetworkAclPublicNAT:
    Type: 'AWS::EC2::NetworkAcl'
    Properties:
      VpcId: !Ref VPC
  SubnetNetworkAclAssociationPublicNAT:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      SubnetId: !Ref SubnetPublicNAT
      NetworkAclId: !Ref NetworkAclPublicNAT
  NetworkAclEntryInPublicNATHTTP:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref NetworkAclPublicNAT
      RuleNumber: '100'
      Protocol: '6'
      PortRange:
        From: '80'
        To: '80'
      RuleAction: 'allow'
      Egress: 'false'
      CidrBlock: '10.0.0.0/16'
  NetworkAclEntryInPublicNATHTTPS:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref NetworkAclPublicNAT
      RuleNumber: '110'
      Protocol: '6'
      PortRange:
        From: '443'
        To: '443'
      RuleAction: 'allow'
      Egress: 'false'
      CidrBlock: '10.0.0.0/16'
  NetworkAclEntryInPublicNATEphemeralPorts:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref NetworkAclPublicNAT
      RuleNumber: '200'
      Protocol: '6'
      PortRange:
        From: '1024'
        To: '65535'
      RuleAction: 'allow'
      Egress: 'false'
      CidrBlock: '0.0.0.0/0'
  NetworkAclEntryOutPublicNATHTTP:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref NetworkAclPublicNAT
      RuleNumber: '100'
      Protocol: '6'
      PortRange:
        From: '80'
        To: '80'
      RuleAction: 'allow'
      Egress: 'true'
      CidrBlock: '0.0.0.0/0'
  NetworkAclEntryOutPublicNATHTTPS:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref NetworkAclPublicNAT
      RuleNumber: '110'
      Protocol: '6'
      PortRange:
        From: '443'
        To: '443'
      RuleAction: 'allow'
      Egress: 'true'
      CidrBlock: '0.0.0.0/0'
  NetworkAclEntryOutPublicNATEphemeralPorts:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref NetworkAclPublicNAT
      RuleNumber: '200'
      Protocol: '6'
      PortRange:
        From: '1024'
        To: '65535'
      RuleAction: 'allow'
      Egress: 'true'
      CidrBlock: '10.0.0.0/16'
  SubnetPublicProxy:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: '10.0.1.0/24'
      MapPublicIpOnLaunch: true
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: 'Public Proxy'
  RouteTablePublicProxy:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
  RouteTableAssociationPublicProxy:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref SubnetPublicProxy
      RouteTableId: !Ref RouteTablePublicProxy
  RoutePublicProxyToInternet:
    Type: 'AWS::EC2::Route'
    Properties:
      RouteTableId: !Ref RouteTablePublicProxy
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref InternetGateway
    DependsOn: VPCGatewayAttachment
  NetworkAclPublicProxy:
    Type: 'AWS::EC2::NetworkAcl'
    Properties:
      VpcId: !Ref VPC
  SubnetNetworkAclAssociationPublicProxy:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      SubnetId: !Ref SubnetPublicProxy
      NetworkAclId: !Ref NetworkAclPublicProxy
  NetworkAclEntryInPublicProxyHTTP:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref NetworkAclPublicProxy
      RuleNumber: '110'
      Protocol: '6'
      PortRange:
        From: '80'
        To: '80'
      RuleAction: 'allow'
      Egress: 'false'
      CidrBlock: '0.0.0.0/0'
  NetworkAclEntryInPublicProxyEphemeralPorts:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref NetworkAclPublicProxy
      RuleNumber: '200'
      Protocol: '6'
      PortRange:
        From: '1024'
        To: '65535'
      RuleAction: 'allow'
      Egress: 'false'
      CidrBlock: '0.0.0.0/0'
  NetworkAclEntryOutPublicProxyHTTP:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref NetworkAclPublicProxy
      RuleNumber: '100'
      Protocol: '6'
      PortRange:
        From: '80'
        To: '80'
      RuleAction: 'allow'
      Egress: 'true'
      CidrBlock: '0.0.0.0/0'
  NetworkAclEntryOutPublicProxyHTTPS:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref NetworkAclPublicProxy
      RuleNumber: '110'
      Protocol: '6'
      PortRange:
        From: '443'
        To: '443'
      RuleAction: 'allow'
      Egress: 'true'
      CidrBlock: '0.0.0.0/0'
  NetworkAclEntryOutPublicProxyEphemeralPorts:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref NetworkAclPublicProxy
      RuleNumber: '200'
      Protocol: '6'
      PortRange:
        From: '1024'
        To: '65535'
      RuleAction: 'allow'
      Egress: 'true'
      CidrBlock: '0.0.0.0/0'
  SubnetPrivateBackend:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: '10.0.2.0/24'
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: 'Private Backend'
  RouteTablePrivateBackend:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
  RouteTableAssociationPrivateBackend:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref SubnetPrivateBackend
      RouteTableId: !Ref RouteTablePrivateBackend
  RoutePrivateBackendToInternet:
    Type: 'AWS::EC2::Route'
    Properties:
      RouteTableId: !Ref RouteTablePrivateBackend
      DestinationCidrBlock: '0.0.0.0/0'
      NatGatewayId: !Ref NatGateway
  NetworkAclPrivateBackend:
    Type: 'AWS::EC2::NetworkAcl'
    Properties:
      VpcId: !Ref VPC
  SubnetNetworkAclAssociationPrivateBackend:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      SubnetId: !Ref SubnetPrivateBackend
      NetworkAclId: !Ref NetworkAclPrivateBackend
  NetworkAclEntryInPrivateBackendHTTP:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref NetworkAclPrivateBackend
      RuleNumber: '110'
      Protocol: '6'
      PortRange:
        From: '80'
        To: '80'
      RuleAction: 'allow'
      Egress: 'false'
      CidrBlock: '10.0.1.0/24'
  NetworkAclEntryInPrivateBackendEphemeralPorts:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref NetworkAclPrivateBackend
      RuleNumber: '200'
      Protocol: '6'
      PortRange:
        From: '1024'
        To: '65535'
      RuleAction: 'allow'
      Egress: 'false'
      CidrBlock: '0.0.0.0/0'
  NetworkAclEntryOutPrivateBackendHTTP:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref NetworkAclPrivateBackend
      RuleNumber: '100'
      Protocol: '6'
      PortRange:
        From: '80'
        To: '80'
      RuleAction: 'allow'
      Egress: 'true'
      CidrBlock: '0.0.0.0/0'
  NetworkAclEntryOutPrivateBackendHTTPS:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref NetworkAclPrivateBackend
      RuleNumber: '110'
      Protocol: '6'
      PortRange:
        From: '443'
        To: '443'
      RuleAction: 'allow'
      Egress: 'true'
      CidrBlock: '0.0.0.0/0'
  NetworkAclEntryOutPrivateBackendEphemeralPorts:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref NetworkAclPrivateBackend
      RuleNumber: '200'
      Protocol: '6'
      PortRange:
        From: '1024'
        To: '65535'
      RuleAction: 'allow'
      Egress: 'true'
      CidrBlock: '10.0.1.0/24'
  EIPNatGateway:
    Type: 'AWS::EC2::EIP'
    Properties:
      Domain: 'vpc'
  NatGateway:
    Type: 'AWS::EC2::NatGateway'
    Properties:
      AllocationId: !GetAtt 'EIPNatGateway.AllocationId'
      SubnetId: !Ref SubnetPublicNAT
  InstanceProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      Roles:
      - !Ref InstanceRole
  InstanceRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: 'ec2.amazonaws.com'
          Action: 'sts:AssumeRole'
      ManagedPolicyArns:
      - 'arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore'
  Proxy:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !FindInMap [RegionMap, !Ref 'AWS::Region', AMI]
      InstanceType: 't2.micro'
      IamInstanceProfile: !Ref InstanceProfile # instead of ec2-ssm-core we use a instance profile created in the same template for testability
      SecurityGroupIds:
      - !Ref SecurityGroup
      SubnetId: !Ref SubnetPublicProxy
      Tags:
      - Key: Name
        Value: Proxy
      UserData:
        'Fn::Base64': !Sub |
          #!/bin/bash -ex
          trap '/opt/aws/bin/cfn-signal -e 1 --stack ${AWS::StackName} --resource Proxy --region ${AWS::Region}' ERR
          amazon-linux-extras install haproxy2
          cat <<"EOF" | tee /etc/haproxy2/haproxy2.cfg > /dev/null
          # ---------------------------------------------------------------------
          # Example configuration for a possible web application.  See the
          # full configuration options online.
          #
          #   https://www.haproxy.org/download/1.8/doc/configuration.txt
          #
          #---------------------------------------------------------------------

          #---------------------------------------------------------------------
          # Global settings
          #---------------------------------------------------------------------
          global
              log         127.0.0.1 local2

              chroot      /var/lib/haproxy2
              pidfile     /var/run/haproxy2.pid
              maxconn     4000
              user        haproxy
              group       haproxy
              daemon

              # turn on stats unix socket
              stats socket /var/lib/haproxy2/stats

              # utilize system-wide crypto-policies
              ssl-default-bind-ciphers PROFILE=SYSTEM
              ssl-default-server-ciphers PROFILE=SYSTEM

          #---------------------------------------------------------------------
          # common defaults that all the 'listen' and 'backend' sections will
          # use if not designated in their block
          #---------------------------------------------------------------------
          defaults
              mode                    http
              log                     global
              option                  httplog
              option                  dontlognull
              option http-server-close
              option forwardfor       except 127.0.0.0/8
              option                  redispatch
              retries                 3
              timeout http-request    10s
              timeout queue           1m
              timeout connect         10s
              timeout client          1m
              timeout server          1m
              timeout http-keep-alive 10s
              timeout check           10s
              maxconn                 3000

          #---------------------------------------------------------------------
          # main frontend which proxys to the backends
          #---------------------------------------------------------------------
          frontend main
              bind *:80
              default_backend             app

          #---------------------------------------------------------------------
          # round robin balancing between the various backends
          #---------------------------------------------------------------------
          backend app
              balance     roundrobin
              server  app1 ${Backend.PrivateIp}:80 check
          EOF
          systemctl start haproxy2
          /opt/aws/bin/cfn-signal -e 0 --stack ${AWS::StackName} --resource Proxy --region ${AWS::Region}
    CreationPolicy:
      ResourceSignal:
        Timeout: PT5M
    DependsOn: VPCGatewayAttachment
  Backend:
    Type: 'AWS::EC2::Instance'
    Properties:
      ImageId: !FindInMap [RegionMap, !Ref 'AWS::Region', AMI]
      InstanceType: 't2.micro'
      IamInstanceProfile: !Ref InstanceProfile # instead of ec2-ssm-core we use a instance profile created in the same template for testability
      SecurityGroupIds:
      - !Ref SecurityGroup
      SubnetId: !Ref SubnetPrivateBackend
      Tags:
      - Key: Name
        Value: Backend
      UserData:
        'Fn::Base64': !Sub |
          #!/bin/bash -ex
          trap '/opt/aws/bin/cfn-signal -e 1 --stack ${AWS::StackName} --resource Backend --region ${AWS::Region}' ERR
          yum -y install httpd
          systemctl start httpd
          /opt/aws/bin/cfn-signal -e 0 --stack ${AWS::StackName} --resource Backend --region ${AWS::Region}
    CreationPolicy:
      ResourceSignal:
        Timeout: PT5M
    DependsOn: RoutePrivateBackendToInternet
Outputs:
  ProxyPublicIpAddress:
    Value: !Sub ${Proxy.PublicIp}
    Description: 'Proxy public IP address'
